{"version":3,"sources":["components/SortButton.js","components/FilterSelect.js","components/InputToken.js","components/LoadMoreButton.js","components/Tbody.js","components/Hint.js","utils/extractLanguageList.js","App.js","serviceWorker.js","index.js"],"names":["SORTDIRECTION","SortButton","className","this","props","sortState","sort","children","toLowerCase","type","direction","onClick","PureComponent","FilterOption","option","value","count","FilterSelect","languageList","filter","onChange","map","key","InputToken","token","setToken","githubRequest","placeholder","LoadMoreButton","content","loadding","loadMore","page","next","total","whetherLastPage","Tbody","repositories","repository","mainLanguage","i","j","compare","repoName","href","htmlUrl","loc","stars","Hint","extractLanguageList","Set","item","language","name","length","App","localStorage","getItem","JSON","parse","githubLOC","GithubLOC","restore","state","bind","forEach","setItem","stringify","setState","event","target","init","nextPage","pageLength","data","cogoToast","success","error","console","load","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f970083b.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport \"./SortButton.css\";\n\nconst SORTDIRECTION = {\n  ascending: \"ascending\",\n  descending: \"descending\"\n};\n\nclass SortButton extends PureComponent {\n  render() {\n    const { sortState, sort, children } = this.props;\n    let className;\n    if (children.toLowerCase() === sortState.type.toLowerCase()) {\n      switch (sortState.direction) {\n        case SORTDIRECTION.ascending:\n          className = SORTDIRECTION.ascending;\n          break;\n        case SORTDIRECTION.descending:\n          className = SORTDIRECTION.descending;\n          break;\n        default:\n          break;\n      }\n    }\n    return (\n      <span\n        onClick={() => {\n          sort(children);\n        }}\n        className={className}\n      >\n        {children}\n      </span>\n    );\n  }\n}\n\nexport default SortButton;\n","import React, { PureComponent } from \"react\";\nimport \"./FilterSelect.css\";\n\nclass FilterOption extends PureComponent {\n  render() {\n    const { option } = this.props;\n    return (\n      <option value={option.value}>\n        {option.value || \"null\"} -- {option.count}\n      </option>\n    );\n  }\n}\n\nclass FilterSelect extends PureComponent {\n  render() {\n    const { languageList, filter } = this.props;\n    return (\n      <select onChange={filter}>\n        <option value=\"-\">--language--</option>\n        {languageList.map(option => (\n          <FilterOption option={option} key={option.value || \"null\"} />\n        ))}\n      </select>\n    );\n  }\n}\n\nexport default FilterSelect;\n","import React, { PureComponent } from \"react\";\nimport \"./InputToken.css\";\n\nclass InputToken extends PureComponent {\n  render() {\n    const { token, setToken, githubRequest } = this.props;\n    return (\n      <div className=\"tokenSection\">\n        <input\n          type=\"text\"\n          className=\"tokenInput\"\n          value={token}\n          onChange={setToken}\n          placeholder=\"github token\"\n        />\n        <button onClick={githubRequest}>enter</button>\n      </div>\n    );\n  }\n}\n\nexport default InputToken;\n","import React, { PureComponent } from \"react\";\nimport \"./LoadMoreButton.css\";\n\nclass LoadMoreButton extends PureComponent {\n  render() {\n    const { loadding, loadMore } = this.props;\n    const { next, total } = this.props.page;\n    const whetherLastPage = next > total;\n    let content;\n    if (loadding) {\n      content = (\n        <div>\n          <div className=\"lds-ellipsis\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n          </div>\n        </div>\n      );\n    } else if (total !== 1) {\n      if (whetherLastPage) {\n        content = <div>last page</div>;\n      } else {\n        content = <button onClick={loadMore}>more</button>;\n      }\n    }\n\n    return <div className=\"loadMore\">{content}</div>;\n  }\n}\n\nexport default LoadMoreButton;\n","import React, { PureComponent } from \"react\";\nimport \"./Tbody.css\";\n\nclass Tbody extends PureComponent {\n  render() {\n    const { repositories, sort, filter } = this.props;\n    return (\n      <tbody>\n        {repositories\n          .filter(repository =>\n            filter === \"-\" ? true : repository.mainLanguage === filter\n          )\n          .sort((i, j) => {\n            if (sort.type === \"\" || sort.direction === \"\") return true;\n            let compare =\n              i[sort.type.toLowerCase()] - j[sort.type.toLowerCase()];\n            switch (sort.direction) {\n              case \"ascending\":\n                compare *= 1;\n                break;\n              case \"descending\":\n                compare *= -1;\n                break;\n              default:\n                break;\n            }\n            return compare;\n          })\n          .map(repository => (\n            <tr key={repository.repoName}>\n              <td>\n                <a href={repository.htmlUrl}>{repository.repoName}</a>\n              </td>\n              <td>{repository.mainLanguage || \"null\"}</td>\n              <td>{repository.loc}</td>\n              <td>{repository.stars}</td>\n            </tr>\n          ))}\n      </tbody>\n    );\n  }\n}\n\nexport default Tbody;\n","import React, { PureComponent } from \"react\";\nimport \"./Hint.css\";\n\nclass Hint extends PureComponent {\n  render() {\n    const { next, total } = this.props.page;\n    return (\n      <div className=\"hint\">\n        {(function IIFE() {\n          if (total === 1) {\n            return (\n              <div>\n                apply for a{\" \"}\n                <a href=\"https://github.com/settings/tokens\">github token</a>{\" \"}\n                with authoritization of \"read:packages\"\n              </div>\n            );\n          } else if (next <= total) {\n            return (\n              <div>\n                √ there are {total} pages, {next - 1} pages loadded\n              </div>\n            );\n          } else if (next > total) {\n            return <div>√ there are {total} pages, all pages loadded</div>;\n          }\n        })()}\n      </div>\n    );\n  }\n}\n\nexport default Hint;\n","function extractLanguageList(repositories) {\n  const languages = [\n    // Set 参考 https://stackoverflow.com/a/43665883/7218912\n    ...new Set(repositories.map(item => item.mainLanguage))\n  ];\n  const languageList = languages.map(language => {\n    return {\n      name: language,\n      count: repositories.filter(\n        repository => repository.mainLanguage === language\n      ).length\n    };\n  });\n  languageList.sort((i, j) => j.count - i.count);\n  return languageList;\n}\n\nexport default extractLanguageList;\n","import React, { Component } from \"react\";\nimport GithubLOC from \"github-loc-rank\";\nimport cogoToast from \"cogo-toast\";\n\nimport SortButton from \"./components/SortButton\";\nimport FilterSelect from \"./components/FilterSelect\";\nimport InputToken from \"./components/InputToken\";\nimport LoadMoreButton from \"./components/LoadMoreButton\";\nimport Tbody from \"./components/Tbody\";\nimport Hint from \"./components/Hint\";\n\nimport extractLanguageList from \"./utils/extractLanguageList\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // 从local storage读取数据\n    let token = localStorage.getItem(\"token\") || \"\";\n    let page = JSON.parse(localStorage.getItem(\"page\")) || {\n      next: 1,\n      total: 1\n    };\n    let repositories = JSON.parse(localStorage.getItem(\"repositories\")) || [];\n    let languageList = JSON.parse(localStorage.getItem(\"languageList\")) || [];\n    let githubLOC = null;\n    if (!!token && repositories.length !== 0) {\n      githubLOC = new GithubLOC();\n      githubLOC.restore({ page, token });\n      token = \"\";\n    }\n    this.state = {\n      filter: \"-\",\n      sort: {\n        type: \"\",\n        direction: \"\"\n      },\n      loadding: false,\n      token,\n      repositories,\n      page,\n      languageList,\n      githubLOC\n    };\n    this.sort = this.sort.bind(this);\n    this.filter = this.filter.bind(this);\n    this.setToken = this.setToken.bind(this);\n    this.githubRequest = this.githubRequest.bind(this);\n    this.loadMore = this.loadMore.bind(this);\n  }\n  componentDidUpdate() {\n    [\"page\", \"repositories\", \"languageList\"].forEach(item => {\n      localStorage.setItem(item, JSON.stringify(this.state[item]));\n    });\n  }\n  sort(type) {\n    let direction;\n    if (this.state.sort.type === type) {\n      if (this.state.sort.direction === \"ascending\") {\n        direction = \"descending\";\n      } else if (this.state.sort.direction === \"descending\") {\n        direction = \"ascending\";\n      }\n    } else if (this.state.sort.type !== type) {\n      direction = \"ascending\";\n    }\n    this.setState({\n      sort: {\n        type,\n        direction\n      }\n    });\n  }\n  filter(event) {\n    this.setState({\n      filter: event.target.value\n    });\n  }\n  setToken(event) {\n    this.setState({\n      token: event.target.value\n    });\n  }\n  async githubRequest() {\n    // todo: 防止重复点击\n    const githubLOC = new GithubLOC();\n    try {\n      this.setState({\n        loadding: true\n      });\n      const { nextPage, pageLength, data } = await githubLOC.init(\n        this.state.token\n      );\n      this.setState({\n        loadding: false\n      });\n      const repositories = data;\n      const languageList = extractLanguageList(repositories);\n      cogoToast.success(\"token added\");\n      localStorage.setItem(\"token\", this.state.token);\n      this.setState({\n        githubLOC,\n        repositories,\n        languageList,\n        token: \"\",\n        page: {\n          next: nextPage,\n          total: pageLength\n        }\n      });\n    } catch (error) {\n      cogoToast.error(\"invalid token or failed network\");\n      console.error(error);\n    }\n  }\n  async loadMore() {\n    try {\n      this.setState({\n        loadding: true\n      });\n      const { nextPage, pageLength, data } = await this.state.githubLOC.load();\n      const repositories = [...this.state.repositories, ...data];\n      const languageList = extractLanguageList(repositories);\n      this.setState({\n        repositories,\n        languageList,\n        page: {\n          next: nextPage,\n          total: pageLength\n        },\n        loadding: false\n      });\n    } catch (error) {\n      cogoToast.error(\"invalid token or failed network\");\n      console.error(error);\n      this.setState({\n        loadding: false\n      });\n    }\n  }\n  render() {\n    return (\n      <div className=\"main\">\n        <InputToken\n          token={this.state.token}\n          setToken={this.setToken}\n          githubRequest={this.githubRequest}\n        />\n        <Hint page={this.state.page} />\n        <div className=\"tableContent\">\n          <table>\n            <thead>\n              <tr>\n                <th>reponame</th>\n                <th>\n                  <FilterSelect\n                    languageList={this.state.languageList}\n                    filter={this.filter}\n                  />\n                </th>\n                <th>\n                  <SortButton sort={this.sort} sortState={this.state.sort}>\n                    LOC\n                  </SortButton>\n                </th>\n                <th>\n                  <SortButton sort={this.sort} sortState={this.state.sort}>\n                    Stars\n                  </SortButton>\n                </th>\n              </tr>\n            </thead>\n            <Tbody\n              repositories={this.state.repositories}\n              sort={this.state.sort}\n              filter={this.state.filter}\n            ></Tbody>\n          </table>\n        </div>\n        <LoadMoreButton\n          loadding={this.state.loadding}\n          page={this.state.page}\n          loadMore={this.loadMore}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}